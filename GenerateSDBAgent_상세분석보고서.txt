================================================================================
                    GenerateSDBAgent 프로젝트 상세 분석 보고서
================================================================================
분석 일자: 2024-12-25
분석 범위: 전체 시스템 아키텍처, 워크플로우, 구현 세부사항
분석 대상: Jira 웹훅 → Flask App → Bitbucket API → LLM 코드 생성 자동화 시스템

================================================================================
📋 목차
================================================================================
1. 프로젝트 개요 및 시나리오
2. 전체 시스템 아키텍처
3. 단계별 상세 동작 분석
4. 핵심 컴포넌트별 세부 구현
5. 에러 처리 및 복구 메커니즘
6. 배포 및 운영 가이드
7. 개선 제안사항

================================================================================
1. 프로젝트 개요 및 시나리오
================================================================================

1.1 전체 시나리오 플로우
------------------------
사용자가 Jira에서 SDB(Screen Definition Block) 관련 이슈를 생성하면,
자동으로 소스 코드를 분석하고 수정하여 Pull Request까지 생성하는 완전 자동화 시스템

단계별 흐름:
1. Jira 이슈 생성 (SDB 개발 요청)
2. Jira → 웹훅 발행 (jira:issue_created)
3. Docker 컨테이너에서 Flask App 실행
4. Flask App에서 웹훅 수신 및 처리
5. IssueProcessor에서 전체 워크플로우 실행:
   - LLM을 통한 이슈 요약 및 분석
   - Bitbucket API로 새 브랜치 생성
   - 프로젝트 구조 분석
   - LLM을 통한 코드 수정/생성
   - 변경사항 커밋
   - Pull Request 생성

1.2 프로젝트 디렉토리 구조
--------------------------
GenerateSDBAgent/
├── app/                    # Flask 애플리케이션 소스
│   ├── main.py            # 메인 Flask 앱 (웹훅 수신)
│   ├── bitbucket_api.py   # Bitbucket REST API 클라이언트
│   ├── llm_handler.py     # OpenAI LLM 처리
│   └── issue_processor.py # 이슈 처리 워크플로우
├── .env                   # 환경 변수 설정
├── requirements.txt       # Python 의존성
├── Dockerfile            # Docker 이미지 빌드
├── docker-compose.yml    # 로컬 개발 환경
├── Procfile              # 프로덕션 배포 설정
├── few_shot_examples.json # LLM Few-shot 학습 예제
└── sample_jira_webhook.json # 웹훅 테스트 데이터

================================================================================
2. 전체 시스템 아키텍처
================================================================================

2.1 컴포넌트 다이어그램
----------------------
┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│   Jira Issue    │───▶│  Flask Webhook  │───▶│ Issue Processor │
│   Created       │    │    Receiver     │    │   Workflow      │
└─────────────────┘    └─────────────────┘    └─────────────────┘
                                                        │
                    ┌─────────────────┐                │
                    │  Bitbucket API  │◀───────────────┤
                    │   - Branches    │                │
                    │   - Files       │                │
                    │   - Commits     │                │
                    │   - Pull Reqs   │                │
                    └─────────────────┘                │
                                                        │
                    ┌─────────────────┐                │
                    │   LLM Handler   │◀───────────────┘
                    │  - OpenAI API   │
                    │  - Code Gen     │
                    │  - Analysis     │
                    └─────────────────┘

2.2 기술 스택
-------------
백엔드:
- Flask 3.0.0: 웹훅 수신 및 REST API
- Gunicorn 21.2.0: 프로덕션 WSGI 서버
- Requests: HTTP 클라이언트

AI/ML:
- OpenAI GPT-4o-mini: 코드 생성 및 분석
- Few-shot Learning: 도메인 특화 패턴 학습

DevOps:
- Docker: 컨테이너화
- Docker Compose: 멀티 컨테이너 오케스트레이션
- Cloudflare Tunnel: 외부 접근

외부 연동:
- Jira REST API: 이슈 관리
- Bitbucket REST API: 소스 코드 관리
- OpenAI API: 자연어 처리

================================================================================
3. 단계별 상세 동작 분석
================================================================================

3.1 Flask App 초기화 (app/main.py)
-----------------------------------
실행 순서:
1. 환경변수 로드 (.env 파일에서)
   - BITBUCKET_URL, BITBUCKET_USERNAME, BITBUCKET_ACCESS_TOKEN
   - BITBUCKET_WORKSPACE, BITBUCKET_REPOSITORY
   - OPENAI_API_KEY

2. 로깅 시스템 초기화
   logging.basicConfig(level=logging.INFO)

3. API 클라이언트 초기화
   - BitbucketAPI 클라이언트 생성
   - LLMHandler 인스턴스 생성
   - IssueProcessor 워크플로우 엔진 생성

4. 토큰 유효성 사전 검증
   GET /2.0/user API로 Bitbucket 토큰 검증

5. Flask 라우팅 설정
   - GET /health: 헬스체크
   - POST /webhook: Jira 웹훅 수신
   - POST /process-issue: 수동 처리 (테스트용)

6. 5000번 포트에서 서버 시작

3.2 웹훅 수신 및 필터링 로직
-----------------------------
@app.route('/webhook', methods=['POST'])에서:

1. JSON 페이로드 추출 및 검증
   payload = request.get_json()
   if not payload: return 400

2. 이벤트 타입 확인
   webhook_event = payload.get('webhookEvent')
   if webhook_event != 'jira:issue_created': return ignored

3. SDB 관련 이슈인지 확인
   issue_type = issue.get('fields', {}).get('issuetype', {}).get('name', '')
   issue_summary = issue.get('fields', {}).get('summary', '')

   if 'SDB' in issue_type or 'SDB 개발' in issue_summary:
       # 처리 시작
   else:
       # 무시

4. 이슈 처리 워크플로우 실행
   result = issue_processor.process_issue(issue)

3.3 Bitbucket API 연동 세부사항 (app/bitbucket_api.py)
-----------------------------------------------------
인증 방식:
- Bearer Token 우선 시도: Authorization: Bearer {access_token}
- Basic Auth 폴백: auth=(username, access_token)

주요 API 엔드포인트:
1. 토큰 검증: GET /2.0/user
2. 브랜치 조회: GET /2.0/repositories/{workspace}/{repo}/refs/branches/{name}
3. 브랜치 생성: POST /2.0/repositories/{workspace}/{repo}/refs/branches
4. 파일 내용 조회: GET /2.0/repositories/{workspace}/{repo}/src/{branch}/{path}
5. 디렉토리 목록: GET /2.0/repositories/{workspace}/{repo}/src/{branch}/{path}
6. 파일 커밋: POST /2.0/repositories/{workspace}/{repo}/src
7. PR 생성: POST /2.0/repositories/{workspace}/{repo}/pullrequests

브랜치 생성 프로세스:
1. 기준 브랜치(master/main)의 최신 커밋 해시 조회
2. 새 브랜치 생성: feature/sdb-{issue_key}-{timestamp}

재시도 메커니즘:
- 최대 3회 재시도
- 지수 백오프: 1초, 2초, 4초 간격

3.4 LLM 처리 로직 (app/llm_handler.py)
--------------------------------------
초기화:
- OpenAI API 키 확인
- 키 없으면 Mock 모드로 자동 전환
- GPT-4o-mini 모델 사용 (기본값)
- 타임아웃: 60초

프롬프트 엔지니어링:
1. 시스템 프롬프트: 역할 정의 및 SDB 도메인 지식
2. Few-shot 예제: few_shot_examples.json에서 로드
3. 사용자 프롬프트: 구체적 요구사항과 프로젝트 컨텍스트

주요 기능:
- analyze_project_structure(): 수정 대상 파일 분석
- generate_code_modification(): 기존 파일 수정
- generate_new_file(): 새 파일 생성
- summarize_issue(): 이슈 내용 요약

응답 파싱:
- JSON 형식 응답 파싱
- 마크다운 코드 블록 (```) 추출
- 언어 지정자 제거 (python, java, etc.)

Mock 모드:
- API 키 없거나 에러 시 자동 활성화
- SDB 관련 기본 템플릿 응답 제공
- 개발/테스트 편의성 제공

3.5 이슈 처리 워크플로우 (app/issue_processor.py)
-------------------------------------------------
전체 프로세스 (process_issue 메서드):

1. 이슈 내용 요약
   issue_summary = llm_handler.summarize_issue(issue)

2. 브랜치 생성
   branch_name = f"feature/sdb-{issue_key}-{timestamp}"
   bitbucket_api.create_branch(branch_name)

3. 프로젝트 구조 분석
   structure = bitbucket_api.analyze_project_structure(branch_name)

4. 수정 대상 파일 분석 (LLM)
   analysis = llm_handler.analyze_project_structure(structure, issue_summary)
   # 결과: files_to_modify, new_files_needed, modification_strategy

5. 기존 파일 수정
   for file_path in analysis['files_to_modify']:
       current_content = bitbucket_api.get_file_content(file_path, branch_name)
       modified_content = llm_handler.generate_code_modification(...)
       bitbucket_api.commit_file(branch_name, file_path, modified_content,
                                f"[{issue_key}] {file_path} 수정 - SDB 기능 추가")

6. 새 파일 생성
   for file_path in analysis['new_files_needed']:
       new_content = llm_handler.generate_new_file(...)
       bitbucket_api.commit_file(branch_name, file_path, new_content,
                                f"[{issue_key}] {file_path} 생성 - SDB 기능 추가")

7. Pull Request 생성
   pr_description = _generate_pr_description(issue, modified_files, analysis)
   pr_data = bitbucket_api.create_pull_request(
       source_branch=branch_name,
       destination_branch="master",
       title=f"[{issue_key}] {issue_summary}",
       description=pr_description
   )

8. 결과 반환
   return {
       'success': True,
       'branch_name': branch_name,
       'pr_url': pr_data['links']['html']['href'],
       'modified_files': modified_files,
       'analysis_result': analysis
   }

================================================================================
4. 핵심 컴포넌트별 세부 구현
================================================================================

4.1 Docker 설정
---------------
Dockerfile:
- 베이스 이미지: python:3.11-slim
- 시스템 패키지: git, curl (헬스체크용)
- Python 패키지: requirements.txt
- 포트: 5000
- 실행 명령: python app/main.py

docker-compose.yml (개발환경):
- sdb-agent 서비스: Flask 앱
  * 포트: 5000:5000
  * 볼륨: . → /app (실시간 코드 반영)
  * 환경: .env 파일
  * 헬스체크: curl http://localhost:5000/health
- ngrok 서비스 (선택): 외부 터널링

docker-compose.cloudflare.yml (프로덕션):
- Cloudflare 터널을 통한 안전한 외부 접근

4.2 환경 설정 (.env)
-------------------
필수 환경변수:
BITBUCKET_URL=https://bitbucket.org
BITBUCKET_USERNAME=hjm0830@midasit.com
BITBUCKET_ACCESS_TOKEN=ATATT3xFfGF0RgdX... (App Password)
BITBUCKET_WORKSPACE=mit_dev
BITBUCKET_REPOSITORY=egen_kr
OPENAI_API_KEY=sk-... (OpenAI API Key)

선택 환경변수:
OPENAI_MODEL=gpt-4o-mini (기본값)
OPENAI_MAX_TOKENS=4000 (기본값)
TEST_MODE=false (기본값)

4.3 웹훅 페이로드 구조 (sample_jira_webhook.json)
-------------------------------------------------
{
  "webhookEvent": "jira:issue_created",
  "issue_event_type_name": "issue_created",
  "user": { "displayName": "...", ... },
  "issue": {
    "key": "SDB-123",
    "fields": {
      "issuetype": { "name": "SDB 개발 요청" },
      "summary": "사용자 관리 SDB 기능 개발",
      "description": {
        "type": "doc",
        "version": 1,
        "content": [ ... ] # Atlassian Document Format
      }
    }
  }
}

4.4 Few-shot 학습 예제 (few_shot_examples.json)
-----------------------------------------------
SDB 관련 코드 패턴 학습을 위한 예제들:
- UserRegistrationSDB 클래스 생성
- ProductSDB에 stockQuantity 필드 추가
- OrderSDB의 validate() 메서드 강화

예제 구조:
[
  {
    "input": "UserRegistrationSDB 생성 요청",
    "output": "public class UserRegistrationSDB { ... }"
  }
]

================================================================================
5. 에러 처리 및 복구 메커니즘
================================================================================

5.1 계층별 에러 처리
-------------------
1. 웹훅 레벨 (app/main.py):
   - 잘못된 페이로드: 400 Bad Request
   - JSON 파싱 실패: 400 Bad Request
   - 이벤트 타입 불일치: 200 OK (무시)
   - 처리 중 예외: 500 Internal Server Error

2. Bitbucket API 레벨 (app/bitbucket_api.py):
   - 401 Unauthorized: "Bitbucket 인증 실패. 토큰을 확인하세요."
   - 403 Forbidden: "권한 부족. 토큰에 필요한 권한이 있는지 확인하세요."
   - 404 Not Found: "요청한 리소스를 찾을 수 없습니다."
   - 429 Too Many Requests: "API 호출 한도를 초과했습니다."

3. OpenAI API 레벨 (app/llm_handler.py):
   - RateLimitError: API 사용량 한도 초과
   - APITimeoutError: API 타임아웃
   - APIError: 일반적인 API 오류
   - 모든 에러 시 Mock 모드로 자동 전환

4. 비즈니스 로직 레벨 (app/issue_processor.py):
   - 파일 없음: 경고 로그 후 계속 진행
   - 브랜치 생성 실패: 에러 반환
   - 커밋 실패: 개별 파일 오류로 처리
   - PR 생성 실패: 경고 후 부분 성공 반환

5.2 복구 전략
-------------
1. Graceful Degradation:
   - OpenAI API 키 없음 → Mock 모드 자동 전환
   - Bitbucket 토큰 무효 → 경고 후 계속 진행
   - 일부 파일 처리 실패 → 나머지 파일은 정상 처리

2. 재시도 로직:
   - HTTP 요청 실패 시 최대 3회 재시도
   - 지수 백오프: 1초, 2초, 4초 간격
   - requests.exceptions.RequestException 포착

3. 부분 성공 처리:
   - 처리된 파일과 실패한 파일 구분 기록
   - 성공한 변경사항은 유지
   - 에러 상세 정보는 결과에 포함

4. 상세 로깅:
   - 모든 주요 단계에서 INFO 로그
   - 에러 발생 시 스택 트레이스 포함
   - 처리 시간 및 결과 메트릭 기록

================================================================================
6. 배포 및 운영 가이드
================================================================================

6.1 로컬 개발 환경 구축
----------------------
1. 저장소 클론:
   git clone <repository-url>
   cd GenerateSDBAgent

2. 환경 설정:
   cp .env.example .env
   # .env 파일 편집하여 실제 토큰 입력

3. Docker 실행:
   docker-compose up -d

4. 헬스체크:
   curl http://localhost:5000/health

5. 웹훅 테스트:
   curl -X POST http://localhost:5000/webhook \
        -H "Content-Type: application/json" \
        -d @sample_jira_webhook.json

6.2 프로덕션 배포
-----------------
Railway.app 배포:
1. Railway 계정 연동
2. 환경변수 설정 (Railway 대시보드에서)
3. git push origin main (자동 배포)

Heroku 배포:
1. heroku create app-name
2. heroku config:set BITBUCKET_USERNAME=...
3. git push heroku main

Docker 직접 배포:
1. docker build -t sdb-agent .
2. docker run -d -p 5000:5000 --env-file .env sdb-agent

Cloudflare Tunnel 사용:
docker-compose -f docker-compose.cloudflare.yml up -d

6.3 모니터링 및 운영
-------------------
1. 헬스체크 엔드포인트:
   GET /health
   응답: {"status": "healthy", "timestamp": "...", "test_mode": false}

2. 로그 모니터링:
   docker logs -f <container-name>

3. 메트릭 수집:
   - 웹훅 수신 횟수
   - 처리 성공/실패 비율
   - 평균 처리 시간
   - API 호출 응답 시간

4. 알림 설정:
   - 헬스체크 실패 시 알림
   - 에러율 임계치 초과 시 알림
   - API 토큰 만료 임박 시 알림

6.4 트러블슈팅
--------------
일반적인 문제와 해결방법:

1. "웹훅 페이로드가 비어있습니다":
   - Jira 웹훅 설정 확인
   - Content-Type: application/json 헤더 확인

2. "Bitbucket 인증 실패":
   - App Password 만료 확인
   - 권한 설정 확인 (Repositories: Read/Write)

3. "OpenAI API 호출 실패":
   - API 키 유효성 확인
   - 사용량 한도 확인
   - Mock 모드로 테스트

4. "브랜치 생성 실패":
   - 저장소 권한 확인
   - 기준 브랜치(master/main) 존재 확인

5. "PR 생성 실패":
   - 브랜치에 커밋 존재 확인
   - 중복 PR 확인

================================================================================
7. 개선 제안사항
================================================================================

7.1 단기 개선사항 (1-2주)
-------------------------
1. 비동기 처리 도입:
   - Celery + Redis를 활용한 백그라운드 작업 처리
   - 웹훅 응답 시간 단축 (현재 동기 처리로 느림)

2. 웹훅 보안 강화:
   - HMAC 서명 검증으로 위조 요청 차단
   - IP 화이트리스트 적용

3. 상세 모니터링:
   - Prometheus + Grafana 메트릭 수집
   - 처리 시간, 성공률, API 응답 시간 대시보드

7.2 중기 개선사항 (1-2개월)
--------------------------
1. C++ 코드 지원 강화:
   - C++ 특화 Few-shot 예제 추가
   - MIDAS NX 도메인 지식 보강
   - 컴파일 검증 로직 추가

2. 코드 품질 향상:
   - 생성된 코드에 대한 정적 분석 (SonarQube)
   - 코드 스타일 검사 및 자동 포맷팅
   - 단위 테스트 자동 생성

3. 워크플로우 커스터마이징:
   - 프로젝트별 처리 규칙 설정
   - 이슈 타입별 다른 처리 로직
   - 승인 프로세스 추가

7.3 장기 개선사항 (3-6개월)
--------------------------
1. 다중 저장소 지원:
   - 여러 Bitbucket 저장소 동시 관리
   - GitHub, GitLab 지원 확장
   - 저장소 간 의존성 관리

2. AI 모델 고도화:
   - 코드 리뷰 자동화
   - 테스트 케이스 자동 생성
   - 성능 최적화 제안

3. 사용자 인터페이스:
   - 웹 대시보드 개발
   - 실시간 처리 상태 모니터링
   - 수동 개입 기능

7.4 운영 효율성 개선
-------------------
1. 설정 관리:
   - 환경별 설정 파일 분리
   - 설정 변경 시 재시작 없이 반영
   - 설정 유효성 검사 강화

2. 로그 및 디버깅:
   - 구조화된 로깅 (JSON 포맷)
   - 요청 추적을 위한 Correlation ID
   - 에러 발생 시 자동 스크린샷

3. 성능 최적화:
   - LLM 응답 캐싱
   - Bitbucket API 호출 최적화
   - 메모리 사용량 모니터링

================================================================================
📊 성과 지표 및 기대 효과
================================================================================

정량적 효과:
- 개발 요청 처리 시간: 수동 2-3일 → 자동 10-30분
- 코드 일관성: 표준 패턴 적용으로 품질 향상
- 개발자 생산성: 반복 작업 자동화로 20-30% 향상

정성적 효과:
- 휴먼 에러 감소
- 표준화된 개발 프로세스 확립
- 개발자의 창의적 업무 집중 가능

================================================================================
📞 기술 지원 및 문의
================================================================================

개발팀: MIDAS IT RPM제품혁신팀
문의: hjm0830@midasit.com
저장소: Bitbucket mit_dev/GenerateSDBAgent
문서 위치: /mnt/c/MIDAS/10_Source/GenerateSDBAgent/

버그 리포트 및 기능 요청:
1. Bitbucket Issues 등록
2. 로그 파일 첨부 (docker logs <container>)
3. 재현 단계 상세 기술

================================================================================
📅 변경 이력
================================================================================
2024-12-25: 초기 프로젝트 분석 및 문서화 완료
           - 전체 아키텍처 분석
           - 컴포넌트별 상세 동작 분석
           - 배포 및 운영 가이드 작성

================================================================================
                                    문서 끝
================================================================================