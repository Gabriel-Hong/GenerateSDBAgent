# Multi-Agent System 기본 설정
# 환경별로 values-local.yaml, values-production.yaml로 오버라이드

global:
  environment: local  # local, staging, production
  namespace: agent-system
  
# Container Registry 설정
imageRegistry:
  url: docker.io  # Minikube: docker.io, Production: your-registry
  pullPolicy: IfNotPresent  # Always, IfNotPresent, Never

# Router Agent 설정
routerAgent:
  enabled: true
  name: router-agent
  replicaCount: 3
  
  image:
    repository: router-agent
    tag: "1.0.0"
  
  service:
    type: ClusterIP
    port: 5000
    targetPort: 5000
  
  resources:
    requests:
      memory: "256Mi"
      cpu: "250m"
    limits:
      memory: "512Mi"
      cpu: "500m"
  
  autoscaling:
    enabled: true
    minReplicas: 3
    maxReplicas: 10
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
  
  env:
    openaiModel: "gpt-4-turbo-preview"
    routerTimeout: 300
    classificationConfidenceThreshold: 0.5
    logLevel: "INFO"
    sdbAgentUrl: "http://sdb-agent-svc:5000"
  
  healthcheck:
    enabled: true
    path: /health
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 3
  
  readinessProbe:
    enabled: true
    path: /health
    initialDelaySeconds: 10
    periodSeconds: 5
    timeoutSeconds: 3
    successThreshold: 1
    failureThreshold: 3

# SDB Agent 설정
sdbAgent:
  enabled: true
  name: sdb-agent
  replicaCount: 2
  
  image:
    repository: sdb-agent
    tag: "1.0.0"
  
  service:
    type: ClusterIP
    port: 5000
    targetPort: 5000
  
  resources:
    requests:
      memory: "512Mi"
      cpu: "500m"
    limits:
      memory: "2Gi"
      cpu: "2000m"
  
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 10
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
  
  env:
    bitbucketUrl: "https://api.bitbucket.org"
    bitbucketUsername: "hjm0830@midasit.com"
    bitbucketWorkspace: "mit_dev"
    bitbucketRepository: "genw_new"
    openaiModel: "gpt-4-turbo-preview"
    testMode: false
  
  healthcheck:
    enabled: true
    path: /health
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 3
  
  readinessProbe:
    enabled: true
    path: /health
    initialDelaySeconds: 20
    periodSeconds: 5
    timeoutSeconds: 3
    successThreshold: 1
    failureThreshold: 3

# Ingress 설정
ingress:
  enabled: true
  className: nginx  # nginx, traefik, alb (AWS)
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "false"  # Minikube에서는 false
    # cert-manager.io/cluster-issuer: "letsencrypt-prod"  # Production에서 활성화
  
  hosts:
    - host: agents.local  # Minikube: agents.local, Production: agents.your-domain.com
      paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: router-agent-svc
              port: 5000
  
  tls: []
  # tls:  # Production에서 활성화
  #   - secretName: agent-tls
  #     hosts:
  #       - agents.your-domain.com

# ConfigMap 설정
config:
  # 공통 설정
  bitbucketUrl: "https://api.bitbucket.org"
  openaiModel: "gpt-4-turbo-preview"
  logLevel: "INFO"

# Secret 관리 (실제 값은 별도로 생성 필요)
secrets:
  # kubectl create secret generic agent-secrets \
  #   --from-literal=openai-api-key='sk-...' \
  #   --from-literal=bitbucket-access-token='...' \
  #   -n agent-system
  existingSecret: "agent-secrets"

# Monitoring (옵션)
monitoring:
  enabled: false
  prometheus:
    enabled: false
  grafana:
    enabled: false

# Network Policy (보안 강화)
networkPolicy:
  enabled: false
  policyTypes:
    - Ingress
  ingress:
    - from:
      - podSelector:
          matchLabels:
            tier: orchestrator
      ports:
        - protocol: TCP
          port: 5000

